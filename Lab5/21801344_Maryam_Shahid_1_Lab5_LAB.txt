Maryam Shahid
21801344
CS224


module top  (input   logic pc, clk, reset,            
	         output  logic[31:0] writedata, dataadr,            
	         output  logic memwrite, memwriteM, regwriteW, writedataM, resultM);  

   logic [31:0] instr, readdata;    

   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (instr[7:2]);  
   dmem dmem (clk, memwrite, dataadr, writedata);

endmodule

// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset,  		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);

  always_ff @(posedge clk)
    if(EN)
      begin
        instrD <= instr;
        PcPlus4D <= PcPlus4F;
      end
    else if (reset)
      begin
        instrD <= instr;
        PcPlus4D <= PcPlus4F;
      end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// StallF will be connected as this EN
                output logic[31:0] PCF);

  always_ff @(posedge clk)
		if(reset)
		begin
			PCF <=0;
		end  
		else if(EN)
		begin
			PCF<=PC;
		end
                
endmodule

// *******************************************************************************
// Below, write the modules for the pipes PipeDtoE, PipeEtoM, PipeMtoW yourselves.
// Don't forget to connect Control signals in these pipes as well.
// *******************************************************************************


module PipeDtoE(input logic clr, clk, reset,RegWriteD, MemtoRegD, MemWriteD,
                input logic [2:0] ALUControlD, 
                input logic BranchD, ALUSrcD, RegDstD,
                input logic [31:0] rd1D, rd2D, 
                input logic [4:0] rsD, rtD, rdD,
                input logic [31:0] signImmD, pcPLUS4D,
                output logic RegWriteE, MemToRegE, MemWriteE,
                output logic [2:0] ALUControlE,
                output logic BranchE, ALUSrcE, RegDstE,
                output logic [31:0] rd1E, rd2E,
                output logic [4:0] rsE, rtE, rdE,
                output logic [31:0] signImmE, pcPLUS4E);
  
  always_ff @ (posedge clk, posedge reset)
    begin
      if (reset | clr)
        begin
          RegWriteE <= 0;
          MemToRegE <= 0;
          MemWriteE <= 0;
          ALUControlE <= 0;
          BranchE <= 0;
          ALUSrcE <= 0;            
          RegDstE <= 0;            
          rd1E <= 0;
          rd2E <= 0;           
          rsE <= 0;           
          rtE <= 0;            
          rdE <= 0;
          signImmE <= 0;
          pcPLUS4E <= 0;
        end
      else
        begin
          RegWriteE <= RegWriteD;
          MemToRegE <= MemtoRegD;
          MemWriteE <= MemWriteD;
          ALUControlE <= ALUControlD;
          BranchE <= BranchD;
          ALUSrcE <= ALUSrcD;
          RegDstE <= RegDstD;
          rd1E <= rd1D;
          rd2E <= rd2D;
          rsE <= rsD;
          rtE <= rtD;
          rdE <= rdD;
          signImmE <= signImmD;
          pcPLUS4E <= pcPLUS4D;
        end
    end
endmodule

module PipeEtoM(input logic clk, reset, RegWriteE, MemtoRegE, MemWriteE, 
                input logic BranchE, zeroE,
                input logic[31:0] ALUOutE,
                input logic[31:0] WriteDataE,
                input logic[4:0] WriteRegE,
                input logic[31:0] pcBranchE,
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic BranchM, zeroM,
                output logic[31:0] ALUOutM,
                output logic[31:0] WriteDataM,
                output logic[4:0] WriteRegM,
                output logic[31:0] pcBranchM);
  
  always_ff @ (posedge clk, posedge reset)
    begin
      if (reset)
        begin
          RegWriteM <= 0;
          MemtoRegM <= 0;
          MemWriteM <= 0;
          BranchM <= 0;
          zeroM <= 0;
          ALUOutM <= 0;
          WriteDataM <= 0;
          WriteRegM <= 0;
          pcBranchM <= 0;
        end
      else
        begin
          RegWriteM <= RegWriteE;
          MemtoRegM <= MemtoRegE;
          MemWriteM <= MemWriteE;
          BranchM <= BranchE;
          zeroM <= zeroE;
          ALUOutM <= ALUOutE;
          WriteDataM <= WriteDataE;
          WriteRegM <= WriteRegE;
          pcBranchM <= pcBranchE;
        end
    end
  
endmodule

module PipeMtoW(input logic clk, reset, RegWriteM, MemtoRegM,
                input logic[31:0] ReadDataM, ALUOutM,
                input logic[4:0] WriteRegM,
                output logic RegWriteW, MemtoRegW,
                output logic[31:0] ReadDataW, ALUOutW,
                output logic[4:0] WriteRegW);

  always_ff @(posedge clk) begin
    if(reset)
      begin
        RegWriteW <= 0;
        MemtoRegW <= 0;
        ReadDataW <= 0;
        ALUOutW <= 0;
        WriteRegW <= 0;
      end
    else
      begin
        RegWriteW <= RegWriteM;
        MemtoRegW <= MemtoRegM;
        ReadDataW <= ReadDataM;
        ALUOutW <= ALUOutM;
        WriteRegW <= WriteRegM;
      end
  end
endmodule


// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmE to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PCBranchM
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// Once again, you don't have to stick to the design below
// *******************************************************************************

module datapath (input logic 	   clk, reset,
                 input logic 	   pcen, irwrite,
                 input logic       regwrite,
                 input logic       alusrca, iord, memtoreg, regdst,
                 input logic [1:0] alusrcb, pcsrc,
                 input logic [2:0] alucontrol,
                 input logic [5:0] op, funct,
                 output logic      zero,
                 output logic [31:0] adr, writedata,
                 input logic [31:0] readdata);
                 
  logic [4:0]  writereg;
  logic [31:0] pcnext, pc;
  logic [31:0] instr, data, srca, srcb;
  logic [31:0] a;
  logic [31:0] aluresult, aluout;
  logic [31:0] signimm; 
  logic [31:0] signimmsh;
  
  logic [31:0] wd3, rd1, rd2;
  
  // op and funct fields to controller 
  assign op = instr[31:26];
  assign funct = instr[5:0];
  
  // datapath

  mux2    #(32) adrmux(pc, aluout, iord, adr);

  flopr   #(32) datareg(clk, reset, readdata, data);
  mux2    #(5) regdstmux(instr[20:16], instr[15:11], regdst, writereg);
  mux2    #(32) wdmux(aluout, data, memtoreg, wd3);
  regfile rf(clk, regwrite, instr[25:21], instr[20:16], writereg, wd3, rd1, rd2);
  signext se(instr[15:0], signimm);
  sl2     immsh(signimm, signimmsh);
  flopr   #(32) areg(clk, reset, rd1, a);
  flopr   #(32) breg(clk, reset, rd2, writedata); 
  mux2    #(32) srcamux(pc, a, alusrca, srca); 

  alu     alu(srca, srcb, alucontrol, aluresult, zero);
  flopr   #(32) alureg(clk, reset, aluresult, aluout);

  
endmodule

// Hazard Unit with inputs and outputs named
// according to the convention that is followed on the book.

module HazardUnit( input logic RegWriteW,
                input logic [4:0] WriteRegW,WriteRegE, WriteRegM,   // new input
                input logic RegWriteM,MemToRegM,
                input logic RegWriteE,MemToRegE, 	
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                input logic BranchD,                    // removed output
                output logic ForwardAD, ForwardBD,      // new output
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF);
  
  logic lwstallD, BranchStallD;
  
  // forwarding to D stage
  assign ForwardAD = (rsD !=0 & rsD == WriteRegM & RegWriteM); 
  assign ForwardBD = (rtD !=0 & rtD == WriteRegM & RegWriteM); 
  
  // forwarding to E stage
  always_comb 
    begin
     ForwardAE = 2'b00; ForwardBE = 2'b00;
      if (rsE != 0 )
        if (rsE == WriteRegM & RegWriteM)
          ForwardAE = 2'b10;
        else if (rsE == WriteRegW & RegWriteW)
          ForwardAE = 2'b01;
      if (rtE != 0)
        if (rtE == WriteRegM & RegWriteM)
          ForwardBE = 2'b10;
        else if (rtE == WriteRegW & RegWriteW)
          ForwardBE = 2'b01;
    end
  
  // stalling
  assign #1 lwstallD = MemToRegE & (rtE == rsD | rtE == rtD);
  assign #1 BranchStallD = BranchD & (RegWriteE & (WriteRegE == rsD | WriteRegE == rtD) | (WriteRegM == rsD | WriteRegM == rtD));
  
  assign #1 StallD = lwstallD | BranchStallD;
  assign #1 StallF = StallD;
  assign #1 FlushE = StallD;

endmodule


module mips (input  logic clk, reset,
             output logic[31:0]  WriteData,
             output logic[31:0]  pcF,
             input  logic[31:0]  instr,
             output logic[31:0]  aluout, resultW,
             output logic[31:0]  instrOut,
             output logic StallD, StallF);

  
  logic memToReg, zero, alusrc, regdst, regWrite, jump, pcsrcM, branch, memWrite;
  logic [31:0] pclus4, pc, pcBranchM, instrD;
  logic [2:0] alucontrol;
  assign instrOut = instr;
  
  controller c (instrD[31:26], instrD[5:0], memToReg, memWrite, alusrc, regdst, regWrite, jump, alucontrol, branch);
  
  datapath dp (clk, reset, pc, instr, regWrite, memToReg, memWrite, alusrc, regdst, alucontrol, branch, pcsrcM, StallD, StallF, resultW, WriteData);

endmodule


// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//	Below is a placeholder program from the single-cycle lab.
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	 
		8'h04: instr = 32'h2003000c;  	
		8'h08: instr = 32'h2067fff7;  	
		8'h0c: instr = 32'h00e22025;  	
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		8'h48: instr = 32'h08000012;	// j 48, so it will loop here
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
         jump, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000100; // R-type
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100010; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000001; // J
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule


module top_tb();

logic[31:0] writeData, dataAdr;
logic pc, clk, reset, memWrite, memwriteM, regwriteW, writedataM, resultM;

  top dut(pc, clk, reset, writeData, dataAdr, memWrite, memwriteM, regwriteW, writedataM, resultM);

initial
  begin
      clk = 0;
      reset = 1; #20ns; 
      reset = 0; 
    
      $display("memwriteM = %0h", memwriteM);
      $display("regwriteW = %0h", regwriteW);
      $display("writedataM = %0h", writedataM);
      $display("pc = %0h", pc);
      $display("instr = %0h", memWrite);
      $display("resultM = %0h", resultM);
    end
    
always
    begin
        #10; clk = ~clk; 
    end
    
endmodule
