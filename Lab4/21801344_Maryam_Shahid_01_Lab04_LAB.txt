CS224
Lab 04
Section No. 4 
Maryam Shahid 
21801344


// Top level system including MIPS and memories

module top  (input   logic 	 	 clk, reset,           
             output  logic[31:0] writedata, dataadr,
             output  logic[31:0] pc, instr, // modified for pc and the instr to be outputs
	     	 output  logic       memwrite);  

   logic [31:0] readdata;    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// addi $v0, $zero, 5
		8'h04: instr = 32'h2003000c;  	// addi $v1, $zero, 12
		8'h08: instr = 32'h2067fff7;  	// addi $a3, $v1, -9
		8'h0c: instr = 32'h00e22025;  	// or $a0, $a3, $v0
		8'h10: instr = 32'h00642824;	// and $a1, $v1, $a0
		8'h14: instr = 32'h00a42820;	// add $a1, $a1, $a0
		8'h18: instr = 32'h10a7000a;	// beq $a1, $a3, 10
		8'h1c: instr = 32'h0064202a;	// slt $a0, $v1, $a0
		8'h20: instr = 32'h10800001;	// beq $a0, $zero, 1
		8'h24: instr = 32'h20050000;	// addi $a0, $zero, 0
		8'h28: instr = 32'h00e2202a;	// slt $a0, $a3, $v0
		8'h2c: instr = 32'h00853820;	// add $a3, $a0, $a1
		8'h30: instr = 32'h00e23822;	// sub $a3, $a3, $v0
		8'h34: instr = 32'hac670044;	// sw $a3, 68 ($v1)
		8'h38: instr = 32'h8c020050;	// lw $v0, 80 ($zero)
		8'h3c: instr = 32'h08000011;	// j 0x0000011
		8'h40: instr = 32'h20020001;	// addi $v0, $zero, 1
		8'h44: instr = 32'hac020054;	// sw $v0, 84 ($zero)
         
        		// new instructions
         
        		// ble
        		8'h48: instr = 32'h0064202a;
        		8'h4c: instr = 32'h10800001;
        		// subi 
       		 8'h50: instr = 32'h38870001;
         
		8'h54: instr = 32'h08000012;	// j 48, so it will loop here
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump;
  logic [2:0]  alucontrol;
  logic		   lte; // BLE

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                alusrc, regdst, regwrite, jump, alucontrol, lte); // BLE added

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump,
               alucontrol, zero, pc, instr, aluout, writedata, readdata, lte); // BLE added

endmodule


module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  input  logic	   lte);  // BLE
                  
   logic [1:0] aluop;
   logic       branch;
   logic 	   ble;  // BLE

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
               jump, aluop, ble); // BLE

   aludec  ad (funct, aluop, alucontrol);

   // BLE 
   assign pcsrc = (branch & zero) | (ble & lte);

endmodule


module maindec (input logic[5:0] op, 
	            output logic memtoreg, memwrite, branch,
	            output logic alusrc, regdst, regwrite, jump,
                output logic[1:0] aluop,
                output logic ble); // BLE
  
   // control width increased for BLE
   logic [10:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
           memtoreg,  aluop, jump, ble} = controls; // BLE added

  always_comb
    case(op)
      6'b000000: controls <= 11'b11000001000; // R-type
      6'b100011: controls <= 11'b10010010000; // LW
      6'b101011: controls <= 11'b00010100000; // SW
      6'b000100: controls <= 11'b00001000100; // BEQ
      6'b001000: controls <= 11'b10010000000; // ADDI
      6'b000010: controls <= 11'b00000000010; // J
      
      // new instructions
      6'b001010: controls <= 11'b10010000100; // SUBI
      6'b001111: controls <= 11'b00000000101; // BLE
    
      default:   controls <= 11'bxxxxxxxxxxx; // illegal op
    endcase
endmodule


module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, 
		 	     input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 		 output logic[31:0] pc, 
	         	 input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
                 input  logic[31:0] readdata,
                 output logic lte);   // less than equal to for BLE

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh, srca, srcb, result;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnext);

   // register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, srca, writedata);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (aluout, readdata, memtoreg, result);
   signext         se (instr[15:0], signimm);

   // ALU logic
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero, lte);  // BLE

endmodule


module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero,
           output logic lte);  // BLE
  
  logic [31:0] S;
  
  assign zero = (result == 0);

  always_comb
    case (alucont)
      3'b000: result = a & b; 
      3'b001: result = a | b; 
      3'b010: result = a + b; 
      3'b110: result = a - b; 
      3'b111: result = a < b; 
      default: result = {32{1'bx}}; 
    endcase
  
  assign lte = zero | S[31];  // BLE
  
endmodule


module alu_tb();
  
  logic [31:0] a, b;
  logic [2:0]  alucont;
  logic [31:0] result;
  logic zero;
  logic lte;
  
  alu deviceUnderTest(a, b, alucont, result, zero, lte);
  
  initial begin
    a = 6; b = 5; alucont = 3'b000; #10;   //and
    a = 7; b = 14; alucont = 3'b001; #10;  //or
    a = 8; b = 8; alucont = 3'b010; #10;   //add
    a = 2; b = 6; alucont = 3'b110; #10;   //subtract
    a = 22; b = 42; alucont = 3'b111; #10; //set less than
  
  end 

endmodule


module top_tb();
  
  logic clk, reset;
  logic[31:0] writedata, dataadr;
  logic[31:0] pc, instr;
  logic memwrite;
  
  top deviceUnderTest(clk, reset, writedata, dataadr, pc, instr, memwrite);
  
  initial 
    begin
      clk = 0;
      reset = 1; #20ns;
      reset = 0;
      
      $display("reset = %0h", reset);
      $display("writedata = %0h", writedata);
      $display("dataadr = %0h", dataadr);
      $display("pc = %0h", pc);
      $display("instr = %0h", memwrite);
      $display("memwrite = %0h", instr);
      
    end
  
  always
    begin
      #20; clk = ~clk;
    end

endmodule





